// Prisma schema for a music platform
// DB: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String    // bcrypt hash
  name           String?
  username       String?   @unique
  bio            String?   @db.VarChar(500)
  avatarUrl      String?
  isPrivate      Boolean   @default(false)
  isArtist       Boolean   @default(false)
  isVerified     Boolean   @default(false)
  verificationToken String? @unique
  verificationExpires DateTime?
  artistProfile  Artist?
  playlists      Playlist[]
  songs          Song[]    @relation("UserSongs")
  comments       Comment[]
  likes          Like[]
  follows        Follow[]  @relation("Following")
  followers      Follow[]  @relation("Followers")
  activities     Activity[]
  reports        Report[]
  marginNotes    MarginNote[]
  reportedBy     Report[]  @relation("ReportUser")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Artist {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  displayName    String?
  bio            String?  @db.VarChar(1000)
  genre          String?
  socialLinks    Json?
  songs          Song[]   @relation("ArtistSongs")
  analytics      Json?
  followers      Follow[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Song {
  id             String    @id @default(uuid())
  title          String
  artist         Artist?   @relation("ArtistSongs", fields: [artistId], references: [id])
  artistId       String?
  uploader       User?     @relation("UserSongs", fields: [uploaderId], references: [id])
  uploaderId     String?
  fileUrl        String    // Vercel Blob storage URL
  coverUrl       String?
  duration       Int?
  genre          String?
  metadata       Json?
  playlists      PlaylistSong[]
  reports        Report[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@index([artistId])
  @@index([uploaderId])
}

model Playlist {
  id             String    @id @default(uuid())
  title          String
  description    String?   @db.VarChar(2000)
  isPrivate      Boolean   @default(false)
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String
  songs          PlaylistSong[]
  likes          Like[]
  comments       Comment[]
  reports        Report[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@index([creatorId])
}

model PlaylistSong {
  id             String      @id @default(uuid())
  playlist       Playlist    @relation(fields: [playlistId], references: [id])
  playlistId     String
  song           Song        @relation(fields: [songId], references: [id])
  songId         String
  order          Int
  marginNotes    MarginNote[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@unique([playlistId, songId])
  @@index([playlistId])
  @@index([songId])
}

model MarginNote {
  id             String      @id @default(uuid())
  content        String      @db.VarChar(280)
  icon           String?
  isPrivate      Boolean     @default(false)
  playlistSong   PlaylistSong @relation(fields: [playlistSongId], references: [id])
  playlistSongId String
  author         User        @relation(fields: [authorId], references: [id])
  authorId       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([playlistSongId])
  @@index([authorId])
}

model Follow {
  id             String   @id @default(uuid())
  follower       User     @relation("Following", fields: [followerId], references: [id])
  followerId     String
  followingUser  User?    @relation("Followers", fields: [followingUserId], references: [id])
  followingUserId String?
  followingArtist Artist? @relation(fields: [followingArtistId], references: [id])
  followingArtistId String?
  createdAt      DateTime @default(now())
  @@index([followerId])
  @@index([followingUserId])
  @@index([followingArtistId])
}

model Like {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  playlist       Playlist  @relation(fields: [playlistId], references: [id])
  playlistId     String
  createdAt      DateTime  @default(now())
  @@unique([userId, playlistId])
  @@index([playlistId])
}

model Comment {
  id             String    @id @default(uuid())
  content        String    @db.VarChar(1000)
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  playlist       Playlist  @relation(fields: [playlistId], references: [id])
  playlistId     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@index([playlistId])
  @@index([userId])
}

model Report {
  id             String    @id @default(uuid())
  reporter       User      @relation(fields: [reporterId], references: [id])
  reporterId     String
  targetUser     User?     @relation("ReportUser", fields: [targetUserId], references: [id])
  targetUserId   String?
  targetPlaylist Playlist? @relation(fields: [targetPlaylistId], references: [id])
  targetPlaylistId String?
  targetSong     Song?     @relation(fields: [targetSongId], references: [id])
  targetSongId   String?
  reason         String    @db.VarChar(500)
  resolved       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@index([reporterId])
  @@index([targetUserId])
  @@index([targetPlaylistId])
  @@index([targetSongId])
}

model Activity {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  type           String    // e.g. 'like', 'comment', 'follow', 'upload', etc.
  data           Json?
  createdAt      DateTime  @default(now())
  @@index([userId])
}
